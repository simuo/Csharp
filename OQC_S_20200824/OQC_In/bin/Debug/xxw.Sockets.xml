<?xml version="1.0"?>
<doc>
    <assembly>
        <name>xxw.Sockets</name>
    </assembly>
    <members>
        <member name="T:xxw.Sockets.Client">
            <summary>
            Socket客户端
            </summary>
        </member>
        <member name="T:xxw.Sockets.Client.OnServerStateChangeDelegate">
            <summary>
            
            </summary>
            <param name="connent"></param>
        </member>
        <member name="E:xxw.Sockets.Client.OnServerStateChangeEvent">
            <summary>
            客户端连接状态改变事件
            </summary>
        </member>
        <member name="M:xxw.Sockets.Client.OnServerStateChange(System.Boolean)">
            <summary>
            
            </summary>
            <param name="connent"></param>
        </member>
        <member name="T:xxw.Sockets.Client.OnReceiveDelegate">
            <summary>
            
            </summary>
            <param name="ip"></param>
            <param name="data_byte"></param>
            <param name="data_string"></param>
        </member>
        <member name="E:xxw.Sockets.Client.OnReceiveEvent">
            <summary>
            客户端数据接收事件
            </summary>
        </member>
        <member name="M:xxw.Sockets.Client.OnReceive(System.String)">
            <summary>
            
            </summary>
            <param name="ip"></param>
        </member>
        <member name="F:xxw.Sockets.Client.TimeoutObject">
            <summary>
            超时记录器
            </summary>
        </member>
        <member name="P:xxw.Sockets.Client.SendTimeOut">
            <summary>
            发送超时时间
            </summary>
        </member>
        <member name="P:xxw.Sockets.Client.ReceiveTimeOut">
            <summary>
            接收超时
            </summary>
        </member>
        <member name="P:xxw.Sockets.Client.ServerIpEndPoint">
            <summary>
            
            </summary>
        </member>
        <member name="P:xxw.Sockets.Client.BufferLength">
            <summary>
            
            </summary>
        </member>
        <member name="M:xxw.Sockets.Client.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="iP"></param>
            <param name="port"></param>
            <param name="bufferLength"></param>
        </member>
        <member name="M:xxw.Sockets.Client.Connect">
            <summary>
            连接
            </summary>
        </member>
        <member name="M:xxw.Sockets.Client.CheckReceive(System.String,System.Byte[])">
            <summary>
            检查接收数据是否满足规则
            </summary>
        </member>
        <member name="M:xxw.Sockets.Client.SendAsync``1(``0)">
            <summary>
            异步发送
            </summary>
        </member>
        <member name="M:xxw.Sockets.Client.Send``1(``0)">
            <summary>
            同步发送
            </summary>
        </member>
        <member name="M:xxw.Sockets.Client.SetEncoding(System.Text.Encoding)">
            <summary>
            设置编码
            </summary>
        </member>
        <member name="M:xxw.Sockets.Client.SetSendTimeOut(System.Int32)">
            <summary>
            实在发送超时
            </summary>
            <param name="timeOut">超时时间(ms)</param>
        </member>
        <member name="M:xxw.Sockets.Client.SetReceiveTimeOut(System.Int32)">
            <summary>
            设置接收超时时间
            </summary>
            <param name="timeOut"></param>
        </member>
        <member name="M:xxw.Sockets.Client.AddRules(xxw.Sockets.ReceiveDataRule)">
            <summary>
            数据验证规则
            </summary>
            <param name="rule"></param>
        </member>
        <member name="T:xxw.Sockets.ClientTcp">
            <summary>
            TCP 客户端
            </summary>
        </member>
        <member name="P:xxw.Sockets.ClientTcp.ReConnectDelay">
            <summary>
            断线重连时间
            </summary>
        </member>
        <member name="P:xxw.Sockets.ClientTcp.IsConnenct">
            <summary>
            连接状态
            </summary>
        </member>
        <member name="P:xxw.Sockets.ClientTcp.ReConnectTimes">
            <summary>
            重连次数
            </summary>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            TCP 客户端
            </summary>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.#ctor(System.Net.IPAddress,System.Int32,System.Int32,System.Boolean)">
            <summary>
            TCP 客户端
            </summary>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.Connect">
            <summary>
            建立连接
            </summary>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.ReConnect">
            <summary>
            断线重连
            </summary>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.SetKeepAlive">
            <summary>
            心跳
            </summary>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.Receive">
            <summary>
            接收数据
            </summary>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.SendAsync``1(``0)">
            <summary>
            异步发送消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.Send``1(``0)">
            <summary>
            同步发送消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.SetAutoReConnect(System.Boolean)">
            <summary>
            设置是否自动重连
            </summary>
            <param name="isAutoReConnect"></param>
        </member>
        <member name="M:xxw.Sockets.ClientTcp.SetReConnectDelay(System.Int32)">
            <summary>
            断线重连时间
            </summary>
            <param name="delayTime"></param>
        </member>
        <member name="T:xxw.Sockets.Proxy.Authentication.AuthMethod">
            <summary>
            Implements a SOCKS authentication scheme.
            </summary>
            <remarks>This is an abstract class; it must be inherited.</remarks>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthMethod.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthMethod instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthMethod.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="!:ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthMethod.BeginAuthenticate(xxw.Sockets.Proxy.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="!:ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="P:xxw.Sockets.Proxy.Authentication.AuthMethod.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>The socket connection with the proxy server.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.Authentication.AuthMethod.Buffer">
            <summary>
            Gets or sets a byt array that can be used to store data.
            </summary>
            <value>A byte array to store data.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.Authentication.AuthMethod.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="F:xxw.Sockets.Proxy.Authentication.AuthMethod.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.Authentication.AuthMethod.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.Authentication.AuthMethod.CallBack">
            <summary>Holds the address of the method to call when the proxy has authenticated the client.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.Authentication.AuthMethod.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="T:xxw.Sockets.Proxy.Authentication.AuthNone">
            <summary>
            This class implements the 'No Authentication' scheme.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthNone.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes an AuthNone instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthNone.Authenticate">
            <summary>
            Authenticates the user.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthNone.BeginAuthenticate(xxw.Sockets.Proxy.HandShakeComplete)">
            <summary>
            Authenticates the user asynchronously.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
            <remarks>This method immediately calls the callback method.</remarks>
        </member>
        <member name="T:xxw.Sockets.Proxy.Authentication.AuthUserPass">
            <summary>
            This class implements the 'username/password authentication' scheme.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthUserPass.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initializes a new AuthUserPass instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthUserPass.GetAuthenticationBytes">
            <summary>
            Creates an array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.
            </summary>
            <returns>An array of bytes that has to be sent if the user wants to authenticate with the username/password authentication scheme.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthUserPass.Authenticate">
            <summary>
            Starts the authentication process.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthUserPass.BeginAuthenticate(xxw.Sockets.Proxy.HandShakeComplete)">
            <summary>
            Starts the asynchronous authentication process.
            </summary>
            <param name="callback">The method to call when the authentication is complete.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthUserPass.OnSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Authentication.AuthUserPass.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the socket received an authentication reply.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="P:xxw.Sockets.Proxy.Authentication.AuthUserPass.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>The username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:xxw.Sockets.Proxy.Authentication.AuthUserPass.Password">
            <summary>
            Gets or sets the password to use when authenticating with the proxy server.
            </summary>
            <value>The password to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="F:xxw.Sockets.Proxy.Authentication.AuthUserPass.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.Authentication.AuthUserPass.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="T:xxw.Sockets.Proxy.HttpsHandler">
            <summary>
            Implements the HTTPS (CONNECT) protocol.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new HttpsHandler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c>  is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initializes a new HttpsHandler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initializes a new HttpsHandler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.GetConnectBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.VerifyConnectHeader(System.Byte[])">
            <summary>
            Verifies that proxy server successfully connected to requested host
            </summary>
            <param name="buffer">Input data array</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.BeginNegotiate(System.Net.IPEndPoint,xxw.Sockets.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the HTTPS server. 
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the HTTPS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.BeginNegotiate(System.String,System.Int32,xxw.Sockets.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the HTTPS server. 
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the HTTPS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the socket is connected to the remote server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.OnConnectSent(System.IAsyncResult)">
            <summary>
            Called when the connect request bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.OnConnectReceive(System.IAsyncResult)">
            <summary>
            Called when an connect reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.ReadUntilHeadersEnd(System.Boolean)">
            <summary>
            Reads socket buffer byte by byte until we reach "\r\n\r\n". 
            </summary>
            <param name="readFirstByte"></param>
        </member>
        <member name="M:xxw.Sockets.Proxy.HttpsHandler.OnEndHeadersReceive(System.IAsyncResult)">
            <summary>
            Called when additional headers have been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="P:xxw.Sockets.Proxy.HttpsHandler.Password">
            <summary>
            Gets or sets the password to use when authenticating with the HTTPS server.
            </summary>
            <value>The password to use when authenticating with the HTTPS server.</value>
        </member>
        <member name="F:xxw.Sockets.Proxy.HttpsHandler.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.HttpsHandler.m_receivedNewlineChars">
            <summary>Holds the count of newline characters received.</summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.HTTP.HttpRequest.Get(System.String,System.Text.Encoding)">
            <summary>
            GET请求
            </summary>
            <param name="url"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.HTTP.HttpRequest.Post(System.String,System.String,System.Text.Encoding,System.String)">
            <summary>
            POST请求
            </summary>
            <param name="url"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.HTTP.HttpRequest.GetResponse(System.String,System.Int32,System.String,System.Text.Encoding)">
            <summary>
            发出请求并获取响应
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="body"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.HTTP.HttpRequest.UseProxy(System.Net.IPAddress,System.Int32,xxw.Sockets.Proxy.ProxyTypes)">
            <summary>
            使用代理
            </summary>
            <param name="iP"></param>
            <param name="port"></param>
            <param name="proxyTypes"></param>
        </member>
        <member name="M:xxw.Sockets.Proxy.HTTP.HttpRequest.ParseURL(System.String)">
            <summary>
            解析URL
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:xxw.Sockets.Proxy.IAsyncProxyResult">
            <summary>
            A class that implements the IAsyncResult interface. Objects from this class are returned by the BeginConnect method of the ProxySocket class.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.IAsyncProxyResult.#ctor(System.Object)">
            <summary>Initializes the internal variables of this object</summary>
            <param name="stateObject">An object that contains state information for this request.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.IAsyncProxyResult.Reset">
            <summary>Initializes the internal variables of this object</summary>
        </member>
        <member name="P:xxw.Sockets.Proxy.IAsyncProxyResult.IsCompleted">
            <summary>Gets a value that indicates whether the server has completed processing the call. It is illegal for the server to use any client supplied resources outside of the agreed upon sharing semantics after it sets the IsCompleted property to "true". Thus, it is safe for the client to destroy the resources after IsCompleted property returns "true".</summary>
            <value>A boolean that indicates whether the server has completed processing the call.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.IAsyncProxyResult.CompletedSynchronously">
            <summary>Gets a value that indicates whether the BeginXXXX call has been completed synchronously. If this is detected in the AsyncCallback delegate, it is probable that the thread that called BeginInvoke is the current thread.</summary>
            <value>Returns false.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.IAsyncProxyResult.AsyncState">
            <summary>Gets an object that was passed as the state parameter of the BeginXXXX method call.</summary>
            <value>The object that was passed as the state parameter of the BeginXXXX method call.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.IAsyncProxyResult.AsyncWaitHandle">
             <summary>
             The AsyncWaitHandle property returns the WaitHandle that can use to perform a WaitHandle.WaitOne or WaitAny or WaitAll. The object which implements IAsyncResult need not derive from the System.WaitHandle classes directly. The WaitHandle wraps its underlying synchronization primitive and should be signaled after the call is completed. This enables the client to wait for the call to complete instead polling. The Runtime supplies a number of waitable objects that mirror Win32 synchronization primitives e.g. ManualResetEvent, AutoResetEvent and Mutex.
             WaitHandle supplies methods that support waiting for such synchronization objects to become signaled with "any" or "all" semantics i.e. WaitHandle.WaitOne, WaitAny and WaitAll. Such methods are context aware to avoid deadlocks. The AsyncWaitHandle can be allocated eagerly or on demand. It is the choice of the IAsyncResult implementer.
            </summary>
             <value>The WaitHandle associated with this asynchronous result.</value>
        </member>
        <member name="F:xxw.Sockets.Proxy.IAsyncProxyResult.m_Completed">
            <summary>Used internally to represent the state of the asynchronous request</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.IAsyncProxyResult.m_StateObject">
            <summary>Holds the value of the StateObject property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.IAsyncProxyResult.m_WaitHandle">
            <summary>Holds the value of the WaitHandle property.</summary>
        </member>
        <member name="T:xxw.Sockets.Proxy.ProxyException">
            <summary>
            The exception that is thrown when a proxy error occurs.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxyException.#ctor">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxyException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ProxyException class.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxyException.Socks5ToString(System.Int32)">
            <summary>
            Converts a SOCKS5 error number to a human readable string.
            </summary>
            <param name="socks5Error">The error number returned by a SOCKS5 server.</param>
            <returns>A string representation of the specified SOCKS5 error number.</returns>
        </member>
        <member name="T:xxw.Sockets.Proxy.ProxyTypes">
            <summary>
            Specifies the type of proxy servers that an instance of the ProxySocket class can use.
            </summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxyTypes.None">
            <summary>No proxy server; the ProxySocket object behaves exactly like an ordinary Socket object.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxyTypes.Https">
            <summary>A HTTPS (CONNECT) proxy server.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxyTypes.Socks4">
            <summary>A SOCKS4[A] proxy server.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxyTypes.Socks5">
            <summary>A SOCKS5 proxy server.</summary>
        </member>
        <member name="T:xxw.Sockets.Proxy.ProxySocket">
            <summary>
            Implements a Socket class that can connect trough a SOCKS proxy server.
            </summary>
            <remarks>This class implements SOCKS4[A] and SOCKS5.<br>It does not, however, implement the BIND commands, so you cannot .</br></remarks>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.String,System.String)">
            <summary>
            Initializes a new instance of the ProxySocket class.
            </summary>
            <param name="addressFamily">One of the AddressFamily values.</param>
            <param name="socketType">One of the SocketType values.</param>
            <param name="protocolType">One of the ProtocolType values.</param>
            <param name="proxyUsername">The username to use when authenticating with the proxy server.</param>
            <param name="proxyPassword">The password to use when authenticating with the proxy server.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <exception cref="T:System.ArgumentNullException"><c>proxyUsername</c> -or- <c>proxyPassword</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">An error occurred while talking to the proxy server.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="host">The remote host to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">An error occurred while talking to the proxy server.</exception>
            <remarks>If you use this method with a SOCKS4 server, it will let the server resolve the hostname. Not all SOCKS4 servers support this 'remote DNS' though.</remarks>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port on the remote host to connect to.</param>
            <param name="callback">The AsyncCallback delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An IAsyncResult that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException">The host parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The port parameter is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <exception cref="T:System.ArgumentNullException">The asyncResult parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The asyncResult parameter was not returned by a call to the BeginConnect method.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.InvalidOperationException">EndConnect was previously called for the asynchronous connection.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">The proxy server refused the connection.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.BeginDns(System.String,xxw.Sockets.Proxy.HandShakeComplete)">
            <summary>
            Begins an asynchronous request to resolve a DNS host name or IP address in dotted-quad notation to an IPAddress instance.
            </summary>
            <param name="host">The host to resolve.</param>
            <param name="callback">The method to call when the hostname has been resolved.</param>
            <returns>An IAsyncResult instance that references the asynchronous request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">There was an error while trying to resolve the host.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.OnResolved(System.IAsyncResult)">
            <summary>
            Called when the specified hostname has been resolved.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote host.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.ProxySocket.OnHandShakeComplete(System.Exception)">
            <summary>
            Called when the Socket has finished talking to the proxy server and is ready to relay data.
            </summary>
            <param name="error">The error to throw when the EndConnect method is called.</param>
        </member>
        <member name="P:xxw.Sockets.Proxy.ProxySocket.ProxyEndPoint">
            <summary>
            Gets or sets the EndPoint of the proxy server.
            </summary>
            <value>An IPEndPoint object that holds the IP address and the port of the proxy server.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.ProxySocket.ProxyType">
            <summary>
            Gets or sets the type of proxy server to use.
            </summary>
            <value>One of the ProxyTypes values.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.ProxySocket.State">
            <summary>
            Gets or sets a user-defined object.
            </summary>
            <value>The user-defined object.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.ProxySocket.ProxyUser">
            <summary>
            Gets or sets the username to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the username that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:xxw.Sockets.Proxy.ProxySocket.ProxyPass">
            <summary>
            Gets or sets the password to use when authenticating with the proxy.
            </summary>
            <value>A string that holds the password that's used when authenticating with the proxy.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:xxw.Sockets.Proxy.ProxySocket.AsyncResult">
            <summary>
            Gets or sets the asynchronous result object.
            </summary>
            <value>An instance of the IAsyncProxyResult class.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.ProxySocket.ToThrow">
            <summary>
            Gets or sets the exception to throw when the EndConnect method is called.
            </summary>
            <value>An instance of the Exception class (or subclasses of Exception).</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.ProxySocket.RemotePort">
            <summary>
            Gets or sets the remote port the user wants to connect to.
            </summary>
            <value>An integer that specifies the port the user wants to connect to.</value>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxySocket.m_State">
            <summary>Holds the value of the State property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxySocket.m_ProxyEndPoint">
            <summary>Holds the value of the ProxyEndPoint property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxySocket.m_ProxyType">
            <summary>Holds the value of the ProxyType property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxySocket.m_ProxyUser">
            <summary>Holds the value of the ProxyUser property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxySocket.m_ProxyPass">
            <summary>Holds the value of the ProxyPass property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxySocket.CallBack">
            <summary>Holds a pointer to the method that should be called when the Socket is connected to the remote device.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxySocket.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxySocket.m_ToThrow">
            <summary>Holds the value of the ToThrow property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.ProxySocket.m_RemotePort">
            <summary>Holds the value of the RemotePort property.</summary>
        </member>
        <member name="T:xxw.Sockets.Proxy.Socks4Handler">
            <summary>
            Implements the SOCKS4[A] protocol.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initializes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <remarks>Resolving the host name will be done at server side. Do note that some SOCKS4 servers do not implement this functionality.</remarks>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.BeginNegotiate(System.String,System.Int32,xxw.Sockets.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.BeginNegotiate(System.Net.IPEndPoint,xxw.Sockets.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the Socket is connected to the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the Socket has sent the handshake data.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks4Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when the Socket has received a reply from the remote proxy server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="T:xxw.Sockets.Proxy.Socks5Handler">
            <summary>
            Implements the SOCKS5 protocol.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c>  is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initializes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.#ctor(System.Net.Sockets.Socket,System.String,System.String)">
            <summary>
            Initializes a new Socks5Handler instance.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use.</param>
            <param name="pass">The password to use.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> -or- <c>pass</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.Authenticate">
            <summary>
            Starts the synchronous authentication process.
            </summary>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">Authentication with the proxy server failed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.GetHostPortBytes(System.String,System.Int32)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific host/port combination.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific host/port combination.</returns>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> or <c>host</c> is invalid.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.GetEndPointBytes(System.Net.IPEndPoint)">
            <summary>
            Creates an array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <returns>An array of bytes that has to be sent when the user wants to connect to a specific IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>host</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>port</c> is invalid.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="remoteEP">The IPEndPoint to connect to.</param>
            <exception cref="T:System.ArgumentNullException"><c>remoteEP</c> is null.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.Negotiate(System.Byte[])">
            <summary>
            Starts negotiating with the SOCKS server.
            </summary>
            <param name="connect">The bytes to send when trying to authenticate.</param>
            <exception cref="T:System.ArgumentNullException"><c>connect</c> is null.</exception>
            <exception cref="T:System.ArgumentException"><c>connect</c> is too small.</exception>
            <exception cref="T:xxw.Sockets.Proxy.ProxyException">The proxy rejected the request.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">The proxy server uses an invalid protocol.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.BeginNegotiate(System.String,System.Int32,xxw.Sockets.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.BeginNegotiate(System.Net.IPEndPoint,xxw.Sockets.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with the SOCKS server. 
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device.</param>
            <param name="callback">The method to call when the negotiation is complete.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.OnConnect(System.IAsyncResult)">
            <summary>
            Called when the socket is connected to the remote server.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.OnAuthSent(System.IAsyncResult)">
            <summary>
            Called when the authentication bytes have been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.OnAuthReceive(System.IAsyncResult)">
            <summary>
            Called when an authentication reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.OnAuthenticated(System.Exception)">
            <summary>
            Called when the socket has been successfully authenticated with the server.
            </summary>
            <param name="e">The exception that has occurred while authenticating, or <em>null</em> if no error occurred.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.OnSent(System.IAsyncResult)">
            <summary>
            Called when the connection request has been sent.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.OnReceive(System.IAsyncResult)">
            <summary>
            Called when a connection reply has been received.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.ProcessReply(System.Byte[])">
            <summary>
            Processes the received reply.
            </summary>
            <param name="buffer">The received reply</param>
            <exception cref="T:System.Net.ProtocolViolationException">The received reply is invalid.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.Socks5Handler.OnReadLast(System.IAsyncResult)">
            <summary>
            Called when the last bytes are read from the socket.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="P:xxw.Sockets.Proxy.Socks5Handler.Password">
            <summary>
            Gets or sets the password to use when authenticating with the SOCKS5 server.
            </summary>
            <value>The password to use when authenticating with the SOCKS5 server.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.Socks5Handler.HandShake">
            <summary>
            Gets or sets the bytes to use when sending a connect request to the proxy server.
            </summary>
            <value>The array of bytes to use when sending a connect request to the proxy server.</value>
        </member>
        <member name="F:xxw.Sockets.Proxy.Socks5Handler.m_Password">
            <summary>Holds the value of the Password property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.Socks5Handler.m_HandShake">
            <summary>Holds the value of the HandShake property.</summary>
        </member>
        <member name="T:xxw.Sockets.Proxy.HandShakeComplete">
            <summary>
            References the callback method to be called when the protocol negotiation is completed.
            </summary>
        </member>
        <member name="T:xxw.Sockets.Proxy.SocksHandler">
            <summary>
            Implements a specific version of the SOCKS protocol. This is an abstract class; it must be inherited.
            </summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.#ctor(System.Net.Sockets.Socket,System.String)">
            <summary>
            Initializes a new instance of the SocksHandler class.
            </summary>
            <param name="server">The socket connection with the proxy server.</param>
            <param name="user">The username to use when authenticating with the server.</param>
            <exception cref="T:System.ArgumentNullException"><c>server</c> -or- <c>user</c> is null.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.PortToBytes(System.Int32)">
            <summary>
            Converts a port number to an array of bytes.
            </summary>
            <param name="port">The port to convert.</param>
            <returns>An array of two bytes that represents the specified port.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.AddressToBytes(System.Int64)">
            <summary>
            Converts an IP address to an array of bytes.
            </summary>
            <param name="address">The IP address to convert.</param>
            <returns>An array of four bytes that represents the specified IP address.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.ReadBytes(System.Int32)">
            <summary>
            Reads a specified number of bytes from the Server socket.
            </summary>
            <param name="count">The number of bytes to return.</param>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ArgumentException">The number of bytes to read is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the Socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The Socket has been closed.</exception>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.HandleEndReceive(System.IAsyncResult)">
            <summary>
            Reads number of received bytes and ensures that socket was not shut down
            </summary>
            <param name="ar">IAsyncResult for receive operation</param>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.HandleEndSend(System.IAsyncResult,System.Int32)">
            <summary>
            Verifies that whole buffer was sent successfully
            </summary>
            <param name="ar">IAsyncResult for receive operation</param>
            <param name="expectedLength">Length of buffer that was sent</param>
            <returns></returns>
        </member>
        <member name="P:xxw.Sockets.Proxy.SocksHandler.Server">
            <summary>
            Gets or sets the socket connection with the proxy server.
            </summary>
            <value>A Socket object that represents the connection with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:xxw.Sockets.Proxy.SocksHandler.Username">
            <summary>
            Gets or sets the username to use when authenticating with the proxy server.
            </summary>
            <value>A string that holds the username to use when authenticating with the proxy server.</value>
            <exception cref="T:System.ArgumentNullException">The specified value is null.</exception>
        </member>
        <member name="P:xxw.Sockets.Proxy.SocksHandler.AsyncResult">
            <summary>
            Gets or sets the return value of the BeginConnect call.
            </summary>
            <value>An IAsyncProxyResult object that is the return value of the BeginConnect call.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.SocksHandler.Buffer">
            <summary>
            Gets or sets a byte buffer.
            </summary>
            <value>An array of bytes.</value>
        </member>
        <member name="P:xxw.Sockets.Proxy.SocksHandler.Received">
            <summary>
            Gets or sets the number of bytes that have been received from the remote proxy server.
            </summary>
            <value>An integer that holds the number of bytes that have been received from the remote proxy server.</value>
        </member>
        <member name="F:xxw.Sockets.Proxy.SocksHandler.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.SocksHandler.m_Username">
            <summary>Holds the value of the Username property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.SocksHandler.m_AsyncResult">
            <summary>Holds the value of the AsyncResult property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.SocksHandler.m_Buffer">
            <summary>Holds the value of the Buffer property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.SocksHandler.m_Received">
            <summary>Holds the value of the Received property.</summary>
        </member>
        <member name="F:xxw.Sockets.Proxy.SocksHandler.ProtocolComplete">
            <summary>Holds the address of the method to call when the SOCKS protocol has been completed.</summary>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.Negotiate(System.String,System.Int32)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.Negotiate(System.Net.IPEndPoint)">
            <summary>
            Starts negotiating with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">The remote endpoint to connect to.</param>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.BeginNegotiate(System.Net.IPEndPoint,xxw.Sockets.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="remoteEP">An IPEndPoint that represents the remote device. </param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="M:xxw.Sockets.Proxy.SocksHandler.BeginNegotiate(System.String,System.Int32,xxw.Sockets.Proxy.HandShakeComplete,System.Net.IPEndPoint)">
            <summary>
            Starts negotiating asynchronously with a SOCKS proxy server.
            </summary>
            <param name="host">The remote server to connect to.</param>
            <param name="port">The remote port to connect to.</param>
            <param name="callback">The method to call when the connection has been established.</param>
            <param name="proxyEndPoint">The IPEndPoint of the SOCKS proxy server.</param>
            <returns>An IAsyncProxyResult that references the asynchronous connection.</returns>
        </member>
        <member name="T:xxw.Sockets.ReceiveData">
            <summary>
            接收数据对象
            </summary>
        </member>
        <member name="P:xxw.Sockets.ReceiveData.Success">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:xxw.Sockets.ReceiveData.ByteData">
            <summary>
            二进制数据
            </summary>
        </member>
        <member name="P:xxw.Sockets.ReceiveData.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:xxw.Sockets.ReceiveData.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:xxw.Sockets.ReceiveDataRule">
            <summary>
            数据验证规则
            </summary>
        </member>
        <member name="P:xxw.Sockets.ReceiveDataRule.Prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="P:xxw.Sockets.ReceiveDataRule.Suffix">
            <summary>
            后缀
            </summary>
        </member>
        <member name="T:xxw.Sockets.Server">
            <summary>
            Socket服务端
            </summary>
        </member>
        <member name="E:xxw.Sockets.Server.OnClientStateChangeEvent">
            <summary>
            客户端连接状态改变事件
            </summary>
        </member>
        <member name="E:xxw.Sockets.Server.OnClientReceiveEvent">
            <summary>
            客户端数据接收事件
            </summary>
        </member>
        <member name="M:xxw.Sockets.Server.#ctor(System.Int32,System.Int32)">
            <summary>
            创建Socket服务端
            </summary>
            <param name="port">端口</param>
            <param name="bufferLength">缓冲区大小（默认 4）</param>
        </member>
        <member name="M:xxw.Sockets.Server.#ctor(System.Net.Sockets.ProtocolType,System.Int32,System.Int32)">
            <summary>
            创建Socket服务端
            </summary>
            <param name="type">Socket类型 Tcp Udp</param>
            <param name="port">端口</param>
            <param name="bufferLength">缓冲区大小（默认 4）</param>
        </member>
        <member name="M:xxw.Sockets.Server.#ctor(System.Net.IPAddress,System.Net.Sockets.ProtocolType,System.Int32,System.Int32)">
            <summary>
            创建Socket服务端
            </summary>
            <param name="iP">服务端IP</param>
            <param name="type">Socket类型 Tcp Udp</param>
            <param name="port">端口</param>
            <param name="bufferLength">缓冲区大小（默认 4）</param>
        </member>
        <member name="M:xxw.Sockets.Server.Start">
            <summary>
            启动服务器端
            </summary>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.Server.Close">
            <summary>
            关闭服务端
            </summary>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.Server.Close(System.String)">
            <summary>
            断开客户端连接
            </summary>
            <param name="ipEndPort"></param>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.Server.ListenClientConnect">
            <summary>
            监听客户端连接
            </summary>
        </member>
        <member name="M:xxw.Sockets.Server.ReceiveClient(xxw.Sockets.ClientModel)">
            <summary>
            接收客户端消息（Tcp）
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:xxw.Sockets.Server.ReceiveClient">
            <summary>
            接收客户端消息（Udp）
            </summary>
        </member>
        <member name="M:xxw.Sockets.Server.Send(System.String)">
            <summary>
            向全部终端发送消息
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.Server.Send(System.String,System.String)">
            <summary>
            向指定客户机发送消息
            </summary>
            <param name="ipEndPort"></param>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:xxw.Sockets.Server.Send(System.String,System.Int32,System.String)">
            <summary>
            向指定客户机发送消息
            </summary>
        </member>
        <member name="M:xxw.Sockets.Server.SetEncoding(System.Text.Encoding)">
            <summary>
            编码
            </summary>
            <param name="encoding"></param>
        </member>
    </members>
</doc>
